{"version":3,"file":"deploy.js","names":["path","require","prompt","build","execute","fs","Q","_","AWS","readdirp","loginFile","join","process","cwd","module","exports","context","executeDfd","defer","then","deploy","resolve","promise","config","credentials","ignore","ignoredFiles","readFileSync","defaultConfig","JSON","parse","e","console","log","exit","filter","ignoredFile","match","map","files","root","sourceDirectory","fileFilter","update","accessKeyId","key","secretAccessKey","secret","region","s3region","s3","S3","uploadPromises","on","entry","fileKey","s3prefix","posix","fileContent","fullPath","uploadParams","Bucket","s3bucket","Key","Body","ACL","CacheControl","Expires","Date","uploadPromise","upload","data","Location","catch","err","error","push","Promise","all","reject","stack"],"sources":["../src/deploy.js"],"sourcesContent":["(function(){\n  var path = require('path'),\n      prompt = require('prompt'),\n      build = require('./build.js').execute,\n      fs = require('fs'),\n      Q = require('q'),\n      _ = require('lodash'),\n      AWS = require('aws-sdk'),\n      readdirp = require('readdirp'),\n      loginFile = path.join(process.cwd(), '.chcplogin');\n\n  module.exports = {\n    execute: execute\n  };\n\n  function execute(context) {\n    var executeDfd = Q.defer();\n\n    build(context).then(function(){\n      deploy(context).then(function(){\n        executeDfd.resolve();\n      });\n    });\n\n    return executeDfd.promise;\n  }\n\n  function deploy(context) {\n    var executeDfd = Q.defer(),\n        config,\n        credentials,\n        ignore = context.ignoredFiles;\n\n    try {\n      config = fs.readFileSync(context.defaultConfig, 'utf8');\n      config = JSON.parse(config);\n    } catch(e) {\n      console.log('Cannot parse cordova-hcp.json. Did you run cordova-hcp init?');\n      process.exit(0);\n    }\n    if(!config) {\n      console.log('You need to run \"cordova-hcp init\" before you can run \"cordova-hcp login\".');\n      console.log('Both commands needs to be invoked in the root of the project directory.');\n      process.exit(0);\n    }\n    try {\n      credentials = fs.readFileSync(loginFile, 'utf8');\n      credentials = JSON.parse(credentials);\n    } catch(e) {\n      console.log('Cannot parse .chcplogin: ', e);\n    }\n    if(!credentials) {\n      console.log('You need to run \"cordova-hcp login\" before you can run \"cordova-hcp deploy\".');\n      process.exit(0);\n    }\n\n    ignore = ignore.filter( ignoredFile => !ignoredFile.match(/^chcp/) )\n    ignore = ignore.map( ignoredFile => `!${ignoredFile}` )\n\n    // console.log('Credentials: ', credentials);\n    // console.log('Config: ', config);\n    // console.log('Ignore: ', ignore);\n\n    var files = readdirp({\n      root: context.sourceDirectory,\n      fileFilter: ignore\n    });\n\n    // Configure AWS\n    AWS.config.update({\n      accessKeyId: credentials.key,\n      secretAccessKey: credentials.secret,\n      region: config.s3region\n    });\n    \n    var s3 = new AWS.S3();\n    var uploadPromises = [];\n\n    files.on('data', function(entry) {\n      var fileKey = config.s3prefix ? path.posix.join(config.s3prefix, entry.path) : entry.path;\n      var fileContent = fs.readFileSync(entry.fullPath);\n      \n      var uploadParams = {\n        Bucket: config.s3bucket,\n        Key: fileKey,\n        Body: fileContent,\n        ACL: 'public-read',\n        CacheControl: 'no-cache, no-store, must-revalidate',\n        Expires: new Date(0)\n      };\n\n      var uploadPromise = s3.upload(uploadParams).promise()\n        .then(function(data) {\n          console.log(\"Updated \" + entry.fullPath + ' -> ' + data.Location);\n        })\n        .catch(function(err) {\n          console.error(\"Failed to upload \" + entry.fullPath + \":\", err);\n          throw err;\n        });\n      \n      uploadPromises.push(uploadPromise);\n    });\n\n    files.on('end', function() {\n      console.log('Deploy started');\n      Promise.all(uploadPromises)\n        .then(function() {\n          console.log(\"Deploy done\");\n          executeDfd.resolve();\n        })\n        .catch(function(err) {\n          console.error(\"unable to sync:\", err);\n          executeDfd.reject();\n        });\n    });\n\n    files.on('error', function(err) {\n      console.error(\"unable to sync:\", err.stack);\n      executeDfd.reject();\n    });\n    return executeDfd.promise;\n  }\n})();\n"],"mappings":"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","ignoreList":[]}