{"version":3,"file":"server.js","names":["path","require","envFile","join","process","cwd","Q","_","fs","buildDirectory","chokidar","express","app","assetPort","env","PORT","disablePublicTunnel","DISABLE_PUBLIC_TUNNEL","compression","build","execute","minimatch","hidefile","io","chcpContext","sourceDirectory","ignoredFiles","opts","module","exports","updateLocalEnv","localEnv","config_url","content_url","json","JSON","stringify","writeFileSync","context","argv","localdev","executeDfd","defer","funcs","push","publicTunnel","dfd","resolve","promise","debugOpts","debug_url","console_url","assetServer","local_url","console","log","config","reduce","when","fileChangeFilter","file","fileIsAllowed","relativeFilePath","relative","i","len","length","isHiddenSync","serverDfd","localUrl","handleFileChange","debounce","killCaches","serveStaticAssets","serveSocketIO","watchForFileChange","err","error","reject","watcher","watch","ignored","persistent","on","then","release","emit","listen","socket","use","enable","static","maxAge","ass","disable","req","res","next","headers","port","options","publicTunnelDfd","ngrok","connect","url"],"sources":["../src/server.js"],"sourcesContent":["(function(){\n  var path = require('path'),\n      envFile = path.join(process.cwd(), '.chcpenv'),\n      Q = require('q'),\n      _ = require('lodash'),\n      fs = require(\"fs\"),\n      buildDirectory = path.join(process.cwd(), '.chcpbuild'),\n      chokidar = require('chokidar'),\n      express = require('express'),\n      app = express(),\n      assetPort = process.env.PORT || 31284,\n      disablePublicTunnel = process.env.DISABLE_PUBLIC_TUNNEL || false,\n      compression = require('compression'),\n      build = require('./build.js').execute,\n      minimatch = require('minimatch'),\n      hidefile = require('hidefile'),\n      io,\n      chcpContext,\n      sourceDirectory,\n      ignoredFiles,\n      opts = {};\n\n  module.exports = {\n    execute: execute\n  };\n\n  function updateLocalEnv(localEnv) {\n    localEnv.config_url = localEnv.content_url + '/chcp.json';\n\n    var json = JSON.stringify(localEnv, null, 2);\n    fs.writeFileSync(envFile, json);\n\n    return localEnv;\n  }\n\n  function execute(context) {\n    chcpContext = context;\n    ignoredFiles = context.ignoredFiles;\n    chcpContext.argv.localdev = true;\n    sourceDirectory = chcpContext.sourceDirectory;\n\n    var executeDfd = Q.defer(),\n      funcs = [];\n\n    funcs.push(function(){\n      if (disablePublicTunnel)\n        return;\n      return publicTunnel(assetPort);\n    });\n\n    funcs.push(function(content_url) {\n      var dfd = Q.defer();\n\n      if (!disablePublicTunnel) {\n        opts.content_url = content_url;\n        chcpContext.argv.content_url = content_url;\n      }\n\n      dfd.resolve();\n      return dfd.promise;\n    });\n\n    funcs.push(function(debugOpts){\n      if(debugOpts){\n        opts.debug_url = debugOpts.debug_url;\n        opts.console_url = debugOpts.console_url;\n      }\n\n      return assetServer(opts);\n    });\n\n    funcs.push(function(local_url){\n      console.log('local_url', local_url);\n      opts.local_url = local_url;\n\n      return build(chcpContext);\n    });\n\n    funcs.push(function(config){\n      if (disablePublicTunnel) {\n        updateLocalEnv({ content_url: config.content_url })\n      }\n      console.log('cordova-hcp local server available at: ' + opts.local_url);\n      console.log('cordova-hcp public server available at: ' + config.content_url);\n    });\n\n    return funcs.reduce(Q.when, Q('initial'));\n  }\n\n  function fileChangeFilter(file) {\n    // Ignore changes in files from the ignore list\n    var fileIsAllowed = true;\n    var relativeFilePath = path.relative(chcpContext.sourceDirectory, file);\n    for (var i=0, len=ignoredFiles.length; i<len; i++) {\n      if (hidefile.isHiddenSync(file) || minimatch(relativeFilePath, ignoredFiles[i])) {\n        fileIsAllowed = false;\n        break;\n      }\n    }\n\n    return fileIsAllowed;\n  }\n\n  function assetServer(opts) {\n    var serverDfd = Q.defer(),\n        localUrl = 'http://localhost:' + assetPort;\n\n    // If a lot of files changes at the same time, we only want to trigger the change event once.\n    handleFileChange = _.debounce(handleFileChange, 500);\n\n    try {\n      killCaches(app);\n      serveStaticAssets(app, opts);\n      serveSocketIO(app);\n      watchForFileChange();\n      serverDfd.resolve(localUrl);\n    } catch(err) {\n      console.error('assetServer error: ', err);\n      serverDfd.reject(err);\n    }\n\n    return serverDfd.promise;\n  }\n\n  function watchForFileChange(){\n    // Monitor for file changes\n    console.log('Checking: ', sourceDirectory);\n    const watcher = chokidar.watch(sourceDirectory, {\n      ignored: fileChangeFilter,\n      persistent: true\n    });\n    \n    watcher.on('change', handleFileChange);\n    watcher.on('add', handleFileChange);\n  }\n\n  function handleFileChange(file) {\n    console.log('File changed: ', file);\n    build(chcpContext).then(function(config) {\n      console.log('Should trigger reload for build: '+config.release);\n      io.emit('release', { config: config });\n    });\n  }\n\n  function serveSocketIO(app) {\n    // Let's start the server\n    io = require(\"socket.io\")(app.listen(assetPort));\n\n    // Open up socket for file change notifications\n    //io.set('transports', ['polling']);\n    io.on('connection', function(socket){\n      console.log('a user connected');\n      socket.on('disconnect', function(){\n        console.log('user disconnected');\n      });\n    });\n  }\n\n  function serveStaticAssets(app, opts) {\n\n    // Static assets\n    app.use(compression());\n    app.enable('view cache');\n    app.use('/', express.static(sourceDirectory, { maxAge: 0 }));\n  }\n\n  function killCaches(ass) {\n    // Disable caches\n    app.disable('etag');\n    app.use(function(req, res, next) {\n      req.headers['if-none-match'] = 'no-match-for-this';\n      next();\n    });\n  }\n\n  function publicTunnel(port, options){\n    var publicTunnelDfd = Q.defer(),\n        ngrok = require('ngrok');\n\n    // And make it accessible from the internet\n    ngrok.connect(port, function (err, url) {\n      if (err) {\n        publicTunnelDfd.reject(err);\n        return console.log('Could not create tunnel: ', err);\n      }\n\n      updateLocalEnv({content_url: url});\n\n      publicTunnelDfd.resolve(url);\n    });\n\n\n    return publicTunnelDfd.promise;\n  }\n})();\n"],"mappings":"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","ignoreList":[]}