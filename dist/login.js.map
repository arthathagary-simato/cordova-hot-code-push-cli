{"version":3,"file":"login.js","names":["_path","_interopRequireDefault","require","_prompt","_fs","_utils","e","__esModule","default","configFile","path","join","process","cwd","loginFile","schema","properties","key","description","message","required","secret","execute","context","validateConfig","prompt","override","argv","delimiter","start","getInput","then","content","writeFile","done","config","fs","readFileSync","console","log","exit","err"],"sources":["../src/login.js"],"sourcesContent":["import path from 'path';\nimport prompt from 'prompt';\nimport fs from 'fs';\n\nimport { getInput, writeFile } from './utils';\n\nconst configFile = path.join(process.cwd(), 'cordova-hcp.json');\nconst loginFile = path.join(process.cwd(), '.chcplogin');\n\nconst schema = {\n  properties: {\n    key: {\n      description: 'Amazon Access Key Id',\n      message: 'You need to provide the Amazon Access Key Id',\n      required: true,\n    },\n    secret: {\n      description: 'Amazon Secret Access Key',\n      message: 'You need to provide the Secret Access Key',\n      required: true,\n    },\n  },\n};\n\nexport function execute(context) {\n  validateConfig();\n\n  prompt.override = context.argv;\n  prompt.message = 'Please provide';\n  prompt.delimiter = ': ';\n  prompt.start();\n\n  getInput(prompt, schema)\n    .then(content => writeFile(loginFile, content))\n    .then(done);\n}\n\nfunction validateConfig() {\n  let config;\n\n  try {\n    config = fs.readFileSync(configFile, 'utf8');\n  } catch(e) {\n    console.log('Cannot parse cordova-hcp.json. Did you run cordova-hcp init?');\n    process.exit(0);\n  }\n\n  if (!config) {\n    console.log('You need to run \"cordova-hcp init\" before you can run \"cordova-hcp login\".');\n    console.log('Both commands needs to be invoked in the root of the project directory.');\n    process.exit(0); // eslint-disable-line no-process-exit\n  }\n}\n\nfunction done(err) {\n  if (err) {\n    return console.log(err);\n  }\n\n  console.log('Project initialized and .chcindex.plogin file created.');\n  console.log('You SHOULD add .chcplogin to your .gitignore');\n  console.log('( echo \\'.chcplogin\\' >> .gitignore )');\n}\n"],"mappings":";;;;;;AAAA,IAAAA,KAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,OAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,GAAA,GAAAH,sBAAA,CAAAC,OAAA;AAEA,IAAAG,MAAA,GAAAH,OAAA;AAA8C,SAAAD,uBAAAK,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAE9C,MAAMG,UAAU,GAAGC,aAAI,CAACC,IAAI,CAACC,OAAO,CAACC,GAAG,CAAC,CAAC,EAAE,kBAAkB,CAAC;AAC/D,MAAMC,SAAS,GAAGJ,aAAI,CAACC,IAAI,CAACC,OAAO,CAACC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC;AAExD,MAAME,MAAM,GAAG;EACbC,UAAU,EAAE;IACVC,GAAG,EAAE;MACHC,WAAW,EAAE,sBAAsB;MACnCC,OAAO,EAAE,8CAA8C;MACvDC,QAAQ,EAAE;IACZ,CAAC;IACDC,MAAM,EAAE;MACNH,WAAW,EAAE,0BAA0B;MACvCC,OAAO,EAAE,2CAA2C;MACpDC,QAAQ,EAAE;IACZ;EACF;AACF,CAAC;AAEM,SAASE,OAAOA,CAACC,OAAO,EAAE;EAC/BC,cAAc,CAAC,CAAC;EAEhBC,eAAM,CAACC,QAAQ,GAAGH,OAAO,CAACI,IAAI;EAC9BF,eAAM,CAACN,OAAO,GAAG,gBAAgB;EACjCM,eAAM,CAACG,SAAS,GAAG,IAAI;EACvBH,eAAM,CAACI,KAAK,CAAC,CAAC;EAEd,IAAAC,eAAQ,EAACL,eAAM,EAAEV,MAAM,CAAC,CACrBgB,IAAI,CAACC,OAAO,IAAI,IAAAC,gBAAS,EAACnB,SAAS,EAAEkB,OAAO,CAAC,CAAC,CAC9CD,IAAI,CAACG,IAAI,CAAC;AACf;AAEA,SAASV,cAAcA,CAAA,EAAG;EACxB,IAAIW,MAAM;EAEV,IAAI;IACFA,MAAM,GAAGC,WAAE,CAACC,YAAY,CAAC5B,UAAU,EAAE,MAAM,CAAC;EAC9C,CAAC,CAAC,OAAMH,CAAC,EAAE;IACTgC,OAAO,CAACC,GAAG,CAAC,8DAA8D,CAAC;IAC3E3B,OAAO,CAAC4B,IAAI,CAAC,CAAC,CAAC;EACjB;EAEA,IAAI,CAACL,MAAM,EAAE;IACXG,OAAO,CAACC,GAAG,CAAC,4EAA4E,CAAC;IACzFD,OAAO,CAACC,GAAG,CAAC,yEAAyE,CAAC;IACtF3B,OAAO,CAAC4B,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACnB;AACF;AAEA,SAASN,IAAIA,CAACO,GAAG,EAAE;EACjB,IAAIA,GAAG,EAAE;IACP,OAAOH,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC;EACzB;EAEAH,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;EACrED,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;EAC3DD,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;AACtD","ignoreList":[]}